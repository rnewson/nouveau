targeted dreyfus feature parity

* pagination (bookmark I guess)
* grouping
* faceting
* partitioned db support

not targeted

* stale=ok
* highlighting
* drilldown

After reaching dreyfus parity, nouveau will diverge;

* no javascript eval
* ddoc will require an index schema, mapping couchdb document fields to lucene fields
* spatial-extras and spatial3d support

interim ideas

* append type to field name, so `index("foo", 12.0")` becomes `new DoublePoint("foo<number>", 12.0)`
* set a special Map to setPointsConfigMap() which examines that suffix and returns a PointsConfig for <number>

* in nouveau branch of couchdb, remove dreyfus entirely and put nouveau at _search_analyze, _search,


search options

* give the user the fastest options possible
** default order is by relevance. the index-time ordering by _id stabilises the shard merging, but you can't
** use bookmarks.
* let user specify index sort order (we'll add _id to the end if they do)
* indicate in response if we benefited from early termination.


bookmark algorithm

users may do basic pagination (where we find top skip+limit and slice out the right bits) up to 10,000 deep.
Then they must use bookmarks.

bookmarks is opt-in, request must set bookmark to "*" and must specify a sort order that ends in _id<string>, or
we reject the request.

the bookmark is set of the highest orders from each participating shard range, including the ones from the previous
bookmark.
